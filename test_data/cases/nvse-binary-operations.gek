name binary;

fn () {
	string testName = "Binary Operations";
	print(("Started running xNVSE " + testName + " unit tests."));
	
//== Assignment operators

// "=" operator
	int iTest = 1;
	assert(iTest == 1); // also tests equality operator
	
	array aTest = ar_list(1, 2);
	assert(aTest == (ar_List(1, 2)));
	assert(aTest != (ar_List(1, 3))); // test inequality
	
	ref rTest = Player;
	assert(rTest == Player);
	
	string sTest = "test";
	assert(sTest == "test");
	
	double fTest = 2.5;
	assert(fTest == 2.5);
	
	// Ensure rounding down works for integers
	iTest = 2.5;
	assert(iTest == 2);
	
	// try setting to Ambiguous-type value
	iTest = *(&(1));
	assert(iTest == 1);
	
	// Try on array element
	aTest = ar_List(1, 2);
	aTest[1] = 4;
	assert(aTest == (ar_List(1, 4)));
	
// "+=" operator
	iTest = 0;
	iTest += 2.5;
	assert(iTest == 2);
	
	aTest = ar_List(1, 2);
	aTest[1] += 4;
	assert(aTest == (ar_List(1, 6)));
	
	sTest = "test";
	sTest += "2";
	assert(sTest == "test2");
	
// "-=" operator
	iTest = 0;
	iTest -= 2;
	assert(iTest == -2);
	
	aTest = ar_List(1, 2);
	aTest[1] -= 4;
	assert(aTest == (ar_List(1, -2)));
	
// "*=" operator
	iTest = 1;
	iTest *= 2;
	assert(iTest == 2);
	
	aTest = ar_List(1, 2);
	aTest[1] *= 4;
	assert(aTest == (ar_List(1, 8)));
	
// "/=" operator
	iTest = 1;
	iTest /= 2;
	assert(iTest == 0);
	
	aTest = ar_List(1, 2);
	aTest[1] /= 1;
	assert(aTest == (ar_List(1, 2)));
	
// "^=" operator
	iTest = 2;
	iTest ^= 2;
	assert(iTest == 4);
	
	aTest = ar_List(1, 2);
	aTest[1] ^= 2;
	assert(aTest == (ar_List(1, 4)));
	
// "%=" operator
	iTest = 2;
	iTest %= 2;
	assert(iTest == 0);
	
	aTest = ar_List(1, 2);
	aTest[1] %= 2;
	assert(aTest == (ar_List(1, 0)));
	
// "&=" operator
	iTest = 2;
	iTest &= 2;
	assert(iTest == 2);
	
	aTest = ar_List(1, 4);
	aTest[1] &= 2;
	assert(aTest == (ar_List(1, 0)));
	
// "|=" operator
	iTest = 2;
	iTest |= 4;
	assert(iTest == 6);
	
	aTest = ar_List(1, 2);
	aTest[1] |= 4;
	assert(aTest == (ar_List(1, 6)));
	
//== Logical operators

// "&&" operator
	assert(true && true);

// "||" operator
	assert(false || true);
	
//== Slice and pair
	// Slice
	sTest = "This is my string";
	string my_substring = sTest[0:3]; // returns "This" the easy way (the first four characters in the string)
	assert(my_substring == "This");

	// Pair
	aTest = ar_Map(1::2, 2::3);
	assert(aTest == (ar_Map(1::2, 2::3)));
	
//== Other Comparators
	fTest = 2.5;
	assert(fTest > 2);
	assert(fTest < 2.6);
	assert(fTest >= 2.5);
	assert(fTest <= 2.5);
	
//== Other operators
	
// "+" operator
	iTest = 0;
	iTest = iTest + 2.5;
	assert(iTest == 2);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] + 4;
	assert(aTest == (ar_List(1, 6)));
	
	sTest = "test";
	sTest = sTest + "2";
	assert(sTest == "test2");
	
// "-" operator
	iTest = 0;
	iTest = iTest - 2;
	assert(iTest == -2);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] - 4;
	assert(aTest == (ar_List(1, -2)));
	
// "*" operator
	iTest = 1;
	iTest = iTest * 2;
	assert(iTest == 2);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] * 4;
	assert(aTest == (ar_List(1, 8)));
	
// "/" operator
	iTest = 1;
	iTest = iTest / 2;
	assert(iTest == 0);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] / 1;
	assert(aTest == (ar_List(1, 2)));
	
// "^" operator
	iTest = 2;
	iTest = iTest ^ 2;
	assert(iTest == 4);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] ^ 2;
	assert(aTest == (ar_List(1, 4)));
	
// "%" operator
	iTest = 2;
	iTest = iTest % 2;
	assert(iTest == 0);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] % 2;
	assert(aTest == (ar_List(1, 0)));
	
// "&" operator
	iTest = 2;
	iTest = iTest & 2;
	assert(iTest == 2);
	
	aTest = ar_List(1, 4);
	aTest[1] = aTest[1] & 2;
	assert(aTest == (ar_List(1, 0)));
	
// "|" operator
	iTest = 2;
	iTest = iTest | 4;
	assert(iTest == 6);
	
	aTest = ar_List(1, 2);
	aTest[1] = aTest[1] | 4;
	assert(aTest == (ar_List(1, 6)));
	
//== Binary shift operators

	assert((1 << 2) == 4);
	assert((4 >> 2) == 1);
	
	print(("Finished running xNVSE " + testName + " unit tests."));
}